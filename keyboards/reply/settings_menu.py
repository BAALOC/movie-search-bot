from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message

from database.user_data import User, Movie
from keyboards.reply import genres_settings, main_menu
from loader import bot
from states.user_states import UserState


def settings_gen_markup() -> ReplyKeyboardMarkup:
    settings_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    settings_markup.row(
        KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫‚å®Ô∏è'),
        KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∂–∞–Ω—Ä—ãüïπ')
    )
    settings_markup.row(
        KeyboardButton(text='‚è™–ù–∞–∑–∞–¥'),
        KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞üóë')
    )
    return settings_markup


def confirmation_gen_markup() -> ReplyKeyboardMarkup:
    confirmation_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    confirmation_markup.row(
        KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å‚úÖ'),
        KeyboardButton(text='–ù–µ —É–¥–∞–ª—è—Ç—å‚ùå')
    )
    return confirmation_markup


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫‚å®Ô∏è')
def handle_search_settings(message: Message) -> None:
    user = User.get(User.user_id == message.from_user.id)
    bot.send_message(
        message.chat.id,
        '–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –¥–æ–ª–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞? (–æ—Ç 1 –¥–æ 250).'
        f'\n–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {user.search_limit}',
        reply_markup=settings_gen_markup()
    )
    bot.set_state(message.from_user.id, UserState.search_limit)


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∂–∞–Ω—Ä—ãüïπ')
def handle_search_settings(message: Message) -> None:
    user = User.get(User.user_id == message.from_user.id)

    if user.genres:
        text = f'–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?\n\n–¢–≤–æ–π –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–æ–≤: {user.genres}'
    else:
        text = '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?\n\n–£ —Ç–µ–±—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞'

    bot.send_message(
        message.chat.id,
        text,
        reply_markup=genres_settings.genres_gen_markup()
    )


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞üóë')
def handle_search_settings(message: Message) -> None:
    bot.send_message(
        message.chat.id,
        '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞?',
        reply_markup=confirmation_gen_markup()
    )


@bot.message_handler(func=lambda message: message.text == '‚è™–ù–∞–∑–∞–¥')
def handle_search_settings(message: Message) -> None:
    bot.send_message(
        message.chat.id,
        '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=main_menu.main_menu_gen_markup()
    )


@bot.message_handler(func=lambda message: message.text in ['–£–¥–∞–ª–∏—Ç—å‚úÖ', '–ù–µ —É–¥–∞–ª—è—Ç—å‚ùå'])
def handle_delete_confirmation(message: Message) -> None:
    if message.text == '–£–¥–∞–ª–∏—Ç—å‚úÖ':
        Movie.delete().where(Movie.user == message.from_user.id).execute()
        bot.send_message(
            message.chat.id,
            '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞‚úÖ',
            reply_markup=settings_gen_markup()
        )
    elif message.text == '–ù–µ —É–¥–∞–ª—è—Ç—å‚ùå':
        bot.send_message(
            message.chat.id,
            '–¢—ã –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å',
            reply_markup=settings_gen_markup()
        )


@bot.message_handler(state=UserState.search_limit)
def bot_get_search_limit(message: Message):
    user_id = message.from_user.id
    try:
        search_limit = int(message.text)
        if not 1 <= search_limit <= 250:
            bot.send_message(
                user_id,
                '–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250',
                reply_markup=settings_gen_markup()
            )
            return

        bot.set_state(message.from_user.id, UserState.base)
        user = User.get(User.user_id == user_id)
        user.search_limit = search_limit
        user.save()

        bot.send_message(
            user_id,
            f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è {search_limit} —Ñ–∏–ª—å–º–æ–≤',
            reply_markup=settings_gen_markup()
        )

    except Exception as exc:
        bot.set_state(message.from_user.id, UserState.base)
        bot.send_message(
            user_id,
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑',
            reply_markup=settings_gen_markup()
        )
        return
