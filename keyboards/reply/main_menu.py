from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton

from api.api import api_search_by_budget
from database.user_data import User
from handlers.custom_handlers import movie_search, movie_by_rating, settings
from handlers.default_handlers import help
from keyboards.inline import pagination
from keyboards.reply import history_menu
from loader import bot
from utils import handle_movie_result, validate_history
from utils.check_registration import bot_check_registration


def main_menu_gen_markup() -> ReplyKeyboardMarkup:
    main_menu_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    main_menu_markup.row(
        KeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—éüîé'),
        KeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—Éüìà'),
        KeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—Éüí∏')
    )
    main_menu_markup.row(
        KeyboardButton(text='–ü–æ–º–æ—â—åüì≤'),
        KeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞üìñ'),
        KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è')
    )
    return main_menu_markup


def budget_menu_gen_markup() -> ReplyKeyboardMarkup:
    budget_menu_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    budget_menu_markup.row(
        KeyboardButton(text='‚è™–ù–∞–∑–∞–¥'),
        KeyboardButton(text='–ü–æ –Ω–∏–∑–∫–æ–º—É –±—é–¥–∂–µ—Ç—Éüìâ'),
        KeyboardButton(text='–ü–æ –≤—ã—Å–æ–∫–æ–º—É –±—é–¥–∂–µ—Ç—Éüìà')
    )
    return budget_menu_markup


@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—éüîé')
def handle_search_by_name(message: Message) -> None:
    movie_search.bot_movie_search(message)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—Éüìà')
def handle_search_by_rating(message: Message) -> None:
    movie_by_rating.bot_movie_by_rating(message)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—Éüí∏')
def handle_search_by_budget(message: Message) -> None:
    user_id = message.from_user.id
    if not bot_check_registration(user_id):
        bot.send_message(
            user_id,
            '–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
            reply_markup=main_menu_gen_markup()
        )
        return

    user = User.get(User.user_id == user_id)
    if user.genres:
        text = f'–ö–∞–∫–æ–π –ø–æ–∏—Å–∫ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?\n\n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–æ–≤: {user.genres}'
    else:
        text = '–ö–∞–∫–æ–π –ø–æ–∏—Å–∫ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?\n\n–£ —Ç–µ–±—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞'

    bot.send_message(message.chat.id, text, reply_markup=budget_menu_gen_markup())


@bot.message_handler(func=lambda message: message.text == '–ü–æ–º–æ—â—åüì≤')
def handle_help(message: Message) -> None:
    help.bot_help(message)


@bot.message_handler(func=lambda message: message.text == '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞üìñ')
def handle_search_history(message: Message) -> None:
    bot.send_message(
        message.chat.id,
        '–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å?',
        reply_markup=history_menu.history_menu_gen_markup()
    )


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è')
def handle_settings(message: Message) -> None:
    settings.bot_settings(message)


@bot.message_handler(func=lambda message: message.text in [
    '–ü–æ –Ω–∏–∑–∫–æ–º—É –±—é–¥–∂–µ—Ç—Éüìâ',
    '–ü–æ –≤—ã—Å–æ–∫–æ–º—É –±—é–¥–∂–µ—Ç—Éüìà'
])
def handle_all_messages(message: Message) -> None:
    user_id = message.from_user.id
    bot.send_message(
        user_id,
        '–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è',
        reply_markup=budget_menu_gen_markup()
    )

    if message.text == '–ü–æ –≤—ã—Å–æ–∫–æ–º—É –±—é–¥–∂–µ—Ç—Éüìà':
        result = api_search_by_budget(user_id=user_id, command='high_budget_movie')
    else:
        result = api_search_by_budget(user_id=user_id, command='low_budget_movie')

    movie_info = pagination.get_movie_info(result=result)
    validate_history.bot_validate_history(user_id=user_id, movie_info=movie_info)
    handle_movie_result.bot_handle_movie_result(user_id=user_id, result=result)
    pagination.bot_send_movie_page(user_id=user_id, data_dict=result)
